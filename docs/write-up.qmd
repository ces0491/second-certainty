---
title: "Second Certainty"
subtitle: "A South African Tax Liability Management API"
author: "Cesaire Tobias"
date: "May 08, 2025"
format: 
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    documentclass: article
    papersize: letter
    geometry:
      - margin=1in
    fontsize: 11pt
---

# Project Description

The Second Certainty Tax Tool addresses one of life's two certainties—taxes—by providing individuals and small businesses with an intuitive platform for managing tax liabilities throughout the fiscal year. Traditional tax management often occurs reactively at year-end, leading to unexpected liabilities, missed deductions, and financial stress. Our application transforms this approach by implementing a proactive, year-round tax management system.

The tool continuously calculates estimated tax liabilities based on income streams, identifies potential deductions, forecasts provisional tax payments, and provides optimization strategies—all in real-time. In today's complex financial landscape, where gig economy participation, investment income, and small business ownership have complicated personal taxation, our solution brings clarity and control to users' tax positions.

By empowering users with ongoing visibility into their tax position, the Second Certainty Tax Tool reduces financial anxiety, prevents costly surprises, and helps maximize legitimate tax advantages throughout the year.

# Technical Requirements

Our application leverages modern technology frameworks to deliver a secure, responsive, and user-friendly experience:

- **Framework**: FastAPI 0.110.1
- **ORM**: SQLAlchemy 2.0.40
- **Validation**: Pydantic 2.6.0
- **Database**: PostgreSQL (or SQLite for development)
- **Authentication**: JWT with password hashing using Passlib 1.7.4 and Bcrypt 4.1.2
- **Data Processing**: HTTPX 0.27.0 for HTTP requests
- **Web Scraping**: BeautifulSoup4 4.12.3 for SARS website data extraction
- **Database Migrations**: Alembic 1.13.1
- **Testing**: Pytest 7.4.4 with pytest-asyncio 0.23.5 and pytest-cov 4.1.0
- **Server**: Uvicorn 0.29.0

The architecture follows a layered approach where the tax calculation engine, user data management, and API endpoints are separated for maintainability and clearer responsibility separation.

## Recent Infrastructure Improvements

We have recently enhanced the project's infrastructure to ensure maximum stability and maintainability:

- **Comprehensive Logging System**: Implemented structured logging with rotation and separate files for different severity levels
- **Database Migration Framework**: Set up Alembic for systematic database schema management and version control
- **Environment Configuration**: Enhanced the configuration system with a well-documented environment variable setup
- **Admin Functionality**: Added administration capabilities for tax data management
- **Enhanced Tax Data Scraping**: Developed a robust multi-strategy scraper for SARS tax data with fallback mechanisms

# Application Features

The Second Certainty Tax API offers comprehensive functionality to address all aspects of proactive tax management:

- **User Authentication**: Secure JWT-based authentication system with password hashing
- **Profile Management**: Create and manage user tax profiles with relevant personal information
- **Income Tracking**: Record multiple income sources (salary, freelance, investments, etc.)
- **Expense Management**: Track tax-deductible expenses across different categories
- **Real-time Tax Liability Calculation**: Determine current tax position at any time
- **Tax Data Management**: Up-to-date tax brackets, rebates, thresholds, and medical credits
- **SARS Integration**: Automatic scraping of latest tax rates from SARS website
- **Provisional Tax Calculation**: Calculate and track provisional tax payments for registered provisional taxpayers
- **Data Validation**: Comprehensive input validation and error handling
- **Role-Based Access Control**: Admin functions for system maintenance and data updates

# Technical Architecture

Our application follows a layered architecture that ensures separation of concerns and maintainability:

## API Layer

The API layer is implemented using FastAPI and provides the interface for client applications. It includes:

- **Authentication Routes** (`/api/auth/*`): User registration, login, and token management
- **Tax Calculation Routes** (`/api/tax/*`): Endpoints for calculating tax liabilities and provisional tax
- **Data Management Routes**: Endpoints for managing income sources and expenses
- **Tax Data Routes**: Endpoints for retrieving tax brackets, rebates, and thresholds
- **Admin Routes** (`/api/admin/*`): Endpoints for administrative functions

## Business Logic Layer

The core business logic includes:

- **Tax Calculator**: The computation engine that applies South African tax rules
- **Data Scraper**: Sophisticated multi-strategy system for collecting tax data from the SARS website
- **Authentication System**: JWT-based authentication with secure password hashing
- **Tax Models**: Comprehensive data models representing the tax system

## Data Layer

The database architecture uses SQLAlchemy ORM to interact with a PostgreSQL database:

- **User Profiles**: Personal and authentication information
- **Income Sources**: Various income streams for users
- **Expenses**: Tax-deductible expenses
- **Tax Data**: Tax brackets, rebates, thresholds, and medical credits by tax year
- **Tax Calculations**: History of tax calculations for audit and reference

## Testing Infrastructure

The testing infrastructure ensures reliability and correctness:

- **Unit Tests**: Tests for individual components (tax calculator, data scraper, utils)
- **Integration Tests**: End-to-end tests for complete workflows
- **Mocked Services**: Simulated external services for consistent testing
- **Test Coverage**: Comprehensive code coverage reporting

# Deployment

The Second Certainty Tax API can be deployed using multiple approaches:

- **Docker**: Using the provided Dockerfile and docker-compose.yml
- **Traditional Deployment**: Direct installation on a server
- **Development Mode**: Local installation for development and testing

Our deployment process includes:

1. Database setup and migration
2. Environment configuration
3. Initial data seeding
4. API server startup with appropriate settings

For production deployment, we recommend:

- Setting a secure `SECRET_KEY` in the .env file
- Configuring a production-ready PostgreSQL database
- Setting up TLS/SSL for HTTPS
- Enabling rate limiting
- Setting up monitoring and logging

# Development Workflow

We follow a structured development workflow that ensures code quality and reliable releases:

## Version Control

- **Git Workflow**: Feature branches with pull requests to main
- **Commit Guidelines**: Clear, descriptive commit messages
- **Code Reviews**: Required for all changes before merging

## Testing Approach

- **Test Strategy**: Combination of unit, integration, and functional tests
- **Coverage Requirements**: Maintain high code coverage across the codebase
- **Automated Testing**: Tests run on every pull request

## Continuous Integration/Continuous Deployment

- **Build Pipeline**: Automated builds triggered on every push
- **Testing Stage**: Automated test execution
- **Deployment Stage**: Automated deployment to development environment

## Documentation Practices

- **Code Documentation**: Comprehensive docstrings for all functions and classes
- **API Documentation**: Auto-generated OpenAPI specification with Swagger UI
- **User Guide**: Step-by-step documentation for end users

# Implementation Details

## Tax Calculation Engine

The tax calculation engine is the core of the application, implementing South African tax rules. It:

1. Determines applicable tax brackets based on income
2. Applies appropriate tax rates and base amounts
3. Calculates applicable rebates based on age
4. Accounts for medical tax credits
5. Calculates effective tax rate and monthly equivalents
6. Determines provisional tax payments for applicable taxpayers

## SARS Data Integration

Our SARS data integration component uses a multi-layered approach to ensure reliable tax data:

1. **Primary Source**: Scrapes the current SARS website for tax rates
2. **Secondary Source**: Searches archived tax information when current data isn't available
3. **Historical Reference**: Uses previous years' data when necessary
4. **Manual Fallback**: Includes hardcoded tax data as a last resort

This ensures that even if the SARS website structure changes, our system can adapt and continue providing accurate tax information.

## Data Models

The system uses a comprehensive set of data models:

- **User Profile**: Personal information and authentication details
- **Income Sources**: Salary, freelance, investment income
- **Expenses**: Categorized tax-deductible expenses
- **Tax Brackets**: Progressive tax rates by income level
- **Tax Rebates**: Primary, secondary, and tertiary rebates
- **Tax Thresholds**: Age-based thresholds for tax-free income
- **Medical Credits**: Medical scheme fee tax credits

## Future Roadmap

Based on our development plan, we will be implementing the following features:

- Integration with banking APIs for automatic income and expense tracking
- Tax optimization recommendations
- Multi-year tax planning tools
- Mobile app integration
- Data visualization for tax trends
- Support for business entities (PTY, CC)
- Integration with popular accounting software

# Conclusion

The Second Certainty Tax API represents a significant advancement in personal tax management for South African taxpayers. By transforming tax management from a reactive, year-end process into a proactive, year-round approach, we empower users to make informed financial decisions with full awareness of their tax implications.

Our comprehensive approach to tax management—combining real-time calculations, data integration, and actionable insights—addresses a critical gap in the financial tools landscape. The robust technical architecture ensures scalability, maintainability, and security for users' sensitive financial information.

---

*Note: This document was prepared on May 08, 2025, and reflects the current state of the Second Certainty Tax API. Features and technical specifications may evolve as we continue to enhance the platform based on user feedback and regulatory changes.*